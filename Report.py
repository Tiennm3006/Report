import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
from datetime import datetime
from docx import Document
from io import BytesIO

st.set_page_config(page_title="Ph√¢n t√≠ch ƒêi·ªán l·ª±c", layout="wide")
st.title("üîç B√°o c√°o ph√¢n t√≠ch k·∫øt qu·∫£ ki·ªÉm tra h·ªá th·ªëng ƒëi·ªán")

uploaded_file = st.file_uploader("T·∫£i l√™n file Excel ch·ª©a sheet 'Tong hop luy ke'", type=["xlsx"])

if uploaded_file:
    df = pd.read_excel(uploaded_file, sheet_name="Tong hop luy ke", header=None)

    # L√†m s·∫°ch d·ªØ li·ªáu
    df_cleaned = df.iloc[4:].copy()
    df_cleaned.columns = [
        "STT", "ƒêi·ªán l·ª±c", "1P_GT", "1P_TT", "3P_GT", "3P_TT",
        "TU", "TI", "T·ªïng c√¥ng t∆°", "K·∫ø ho·∫°ch", "T·ª∑ l·ªá"
    ]
    df_cleaned = df_cleaned[df_cleaned["ƒêi·ªán l·ª±c"].notna()]
    cols_to_numeric = ["1P_GT", "1P_TT", "3P_GT", "3P_TT", "TU", "TI", "T·ªïng c√¥ng t∆°", "K·∫ø ho·∫°ch", "T·ª∑ l·ªá"]
    df_cleaned[cols_to_numeric] = df_cleaned[cols_to_numeric].apply(pd.to_numeric, errors='coerce')

    # T·ªïng quan v√† d·ª± b√°o
    total_current = df_cleaned["T·ªïng c√¥ng t∆°"].sum()
    total_plan = df_cleaned["K·∫ø ho·∫°ch"].sum()
    days_passed = (datetime(2025, 3, 28) - datetime(2025, 1, 1)).days
    days_total = (datetime(2025, 9, 30) - datetime(2025, 1, 1)).days
    avg_per_day = total_current / days_passed
    forecast_total = avg_per_day * days_total
    forecast_ratio = forecast_total / total_plan

    # Top 3 v√† Bottom 3
    df_sorted = df_cleaned.sort_values(by="T·ª∑ l·ªá", ascending=False)
    top_3 = df_sorted.head(3)
    bottom_3 = df_sorted.tail(3)

    # Hi·ªÉn th·ªã s·ªë li·ªáu
    st.subheader("T·ªïng quan v√† d·ª± b√°o")
    col1, col2 = st.columns(2)
    with col1:
        st.metric("T·ªïng ƒë√£ th·ª±c hi·ªán", f"{total_current:,}")
        st.metric("K·∫ø ho·∫°ch", f"{total_plan:,}")
        st.metric("T·ªëc ƒë·ªô TB/ng√†y", f"{avg_per_day:.2f}")
    with col2:
        st.metric("D·ª± b√°o ƒë·∫øn 30/09/2025", f"{int(forecast_total):,}")
        st.metric("T·ª∑ l·ªá d·ª± b√°o", f"{forecast_ratio*100:.2f}%")

    st.subheader("Bi·ªÉu ƒë·ªì t·ª∑ l·ªá ho√†n th√†nh c·ªßa c√°c ƒêi·ªán l·ª±c")
    fig, ax = plt.subplots(figsize=(10, 5))
    ax.bar(df_sorted["ƒêi·ªán l·ª±c"], df_sorted["T·ª∑ l·ªá"] * 100)
    ax.set_ylabel("T·ª∑ l·ªá ho√†n th√†nh (%)")
    ax.set_title("T·ª∑ l·ªá ho√†n th√†nh k·∫ø ho·∫°ch theo ƒêi·ªán l·ª±c")
    ax.tick_params(axis='x', rotation=45)
    st.pyplot(fig)

    st.subheader("Bi·ªÉu ƒë·ªì Top 3 t·ª∑ l·ªá cao nh·∫•t")
    fig_top, ax_top = plt.subplots()
    ax_top.bar(top_3["ƒêi·ªán l·ª±c"], top_3["T·ª∑ l·ªá"] * 100, color='green')
    ax_top.set_ylabel("T·ª∑ l·ªá ho√†n th√†nh (%)")
    ax_top.set_title("Top 3 ƒêi·ªán l·ª±c c√≥ t·ª∑ l·ªá ho√†n th√†nh cao nh·∫•t")
    st.pyplot(fig_top)

    st.subheader("Bi·ªÉu ƒë·ªì Bottom 3 t·ª∑ l·ªá th·∫•p nh·∫•t")
    fig_bot, ax_bot = plt.subplots()
    ax_bot.bar(bottom_3["ƒêi·ªán l·ª±c"], bottom_3["T·ª∑ l·ªá"] * 100, color='red')
    ax_bot.set_ylabel("T·ª∑ l·ªá ho√†n th√†nh (%)")
    ax_bot.set_title("Bottom 3 ƒêi·ªán l·ª±c c√≥ t·ª∑ l·ªá ho√†n th√†nh th·∫•p nh·∫•t")
    st.pyplot(fig_bot)

    st.subheader("Top 3 t·ª∑ l·ªá cao nh·∫•t")
    st.dataframe(top_3[["ƒêi·ªán l·ª±c", "T·ªïng c√¥ng t∆°", "K·∫ø ho·∫°ch", "T·ª∑ l·ªá"]])

    st.subheader("Bottom 3 t·ª∑ l·ªá th·∫•p nh·∫•t")
    st.dataframe(bottom_3[["ƒêi·ªán l·ª±c", "T·ªïng c√¥ng t∆°", "K·∫ø ho·∫°ch", "T·ª∑ l·ªá"]])

    # T·∫°o file Word b√°o c√°o
    def generate_docx():
        doc = Document()
        doc.add_heading('B√ÅO C√ÅO PH√ÇN T√çCH K·∫æT QU·∫¢ KI·ªÇM TRA ƒê·∫æN NG√ÄY 28/03/2025', 0)
        doc.add_heading('I. ƒê√ÅNH GI√Å T·ªîNG QU√ÅT', level=1)
        doc.add_paragraph(
            f"T·ªïng s·ªë c√¥ng t∆° ƒë√£ th·ª±c hi·ªán: {total_current:,}\n"
            f"K·∫ø ho·∫°ch t·ªïng: {total_plan:,}\n"
            f"S·ªë ng√†y ƒë√£ th·ª±c hi·ªán: {days_passed} ng√†y\n"
            f"T·ªëc ƒë·ªô trung b√¨nh/ng√†y: {avg_per_day:.2f} c√¥ng t∆°/ng√†y\n"
            f"D·ª± b√°o ƒë·∫øn 30/09/2025: {int(forecast_total):,} c√¥ng t∆°\n"
            f"T·ª∑ l·ªá d·ª± b√°o: {forecast_ratio*100:.2f}%\n"
        )
        doc.add_heading('II. TOP 3 ƒêI·ªÜN L·ª∞C', level=1)
        for _, row in top_3.iterrows():
            doc.add_paragraph(
                f"- {row['ƒêi·ªán l·ª±c']}: {row['T·ªïng c√¥ng t∆°']:,}/{row['K·∫ø ho·∫°ch']:,} ({row['T·ª∑ l·ªá']*100:.2f}%)"
            )
        doc.add_heading('III. BOTTOM 3 ƒêI·ªÜN L·ª∞C', level=1)
        for _, row in bottom_3.iterrows():
            doc.add_paragraph(
                f"- {row['ƒêi·ªán l·ª±c']}: {row['T·ªïng c√¥ng t∆°']:,}/{row['K·∫ø ho·∫°ch']:,} ({row['T·ª∑ l·ªá']*100:.2f}%)"
            )
        doc.add_heading('IV. K·∫æT LU·∫¨N', level=1)
        doc.add_paragraph(
            "V·ªõi t·ªëc ƒë·ªô hi·ªán t·∫°i, to√†n ƒë∆°n v·ªã s·∫Ω ch∆∞a ƒë·∫°t k·∫ø ho·∫°ch v√†o 30/09/2025 n·∫øu kh√¥ng tƒÉng t·ªëc."
        )

        buffer = BytesIO()
        doc.save(buffer)
        buffer.seek(0)
        return buffer

    # N√∫t t·∫£i file
    word_file = generate_docx()
    st.download_button("üìÑ T·∫£i b√°o c√°o Word", data=word_file, file_name="Bao_cao_phan_tich_dien_luc.docx")
